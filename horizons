#!/usr/local/bin/expect --
#
# Change the above pointer as necessary for the expect installation on the
# local machine (i.e., to path output by UNIX/Linux command 'which expect')
#
# Automate the Horizons session required to produce an OBSERVER TABLE for
# a user-specified Horizons object. Generally, this script is suited for
# situations where the same output quantities (i.e., defined by the input
# file) are desired for a list of objects (specified one at a time on the
# calling command-line).
#
# The latest version of this script (along with other scripts) is available at:
#
#   ftp://ssd.jpl.nasa.gov/pub/ssd/SCRIPTS/obs_tbl
#
# A corresponding example input file is at:
#
#   ftp://ssd.jpl.nasa.gov/pub/ssd/SCRIPTS/obs_tbl.inp
#
# Version 2.0                                                    (Expect v5.45)
#
# Modification History:
#
#  DATE         Who  Change
#  -----------  ---  ----------------------------------------------------------
#  2003-Aug-19  JDG  V1.0 (derived from script "smb_spk").
#  2012-Sep-14  JDG  Fixed to allow passing negative station site codes.
#                    Fixed FTP dialogue case to match new server
#                    Changed handling of START_TIME dialogue
#                    Added support of ANG_FORMAT default over-ride
#                     as an example of changing the default settings.
#  2013-Feb-13  JDG  Added example to doc for specifying spacecraft
#                     (i.e., passing negative ID numbers)
#  2015-Aug-28  JDG  Version 2.0:
#                     Add support for optionally changing all Observer-Table
#                     default settings. Modernized.
#  2017-Mar-13  JDG  Updated reference from "http:" to "https:"
#  2017-May-31  JDG  Added ANG_RATE_CUTOFF support
#
# Key:
#  JDG= Jon.D.Giorgini@jpl.nasa.gov
#
# BACKGROUND:
# -----------
#
#   This script ("obs_tbl") and companion input file ("obs_tbl.inp") allow a
# user to type one command on a workstation and produce a numerically integrated
# Horizons ASCII observer-table file on that same machine for a specified
# object.
#
#   The script offers network transparency by connecting to the JPL Horizons
# ephemeris system, automating the interaction with it, then transferring the
# file back to the user's local machine using FTP.
#
# COMMAND LINE:
# -------------
#
#   obs_tbl [target] {output_file}
#
# EXPLANATION:
# ------------
#
#   [target]
#
#     A Horizons command specifying a single target (a planet, satellite,
#     asteroid, comet, or spacecraft).  REQUIRED.
#
#     Note that ID numbers provide unique matches, while name strings
#     often do not. For example, string "Io" would match satellite Io
#     and Iocaste (and some other cases), while "501" uniquely specifies
#     the Jovian  satellite. Enclose string in quotes (and possibly also
#     braces if a negative number, such as spacecraft ID). See below for
#     examples and Horizons documentation for details on specifying
#     objects.
#
#            https://ssd.jpl.nasa.gov/?horizons
#
#       Examples: "DES= 1999 JM8;" (Asteroid with designation 1999 JM8)
#                 "4179;"          (Numbered asteroid 4179 Toutatis)
#                 "433;"           (Numbered asteroid 433 Eros)
#                 "DES= 3102762;"  (Object w/SPICE-ID 3102762 (2002 AA29)
#                 "Golevka;"       (Named asteroid 6489 Golevka)
#                 "501"            (Jovian satellite Io)
#                 "Venus"          (Planet Venus)
#                 "Tethys"         (Saturnian satellite Tethys)
#                 "301"            (Earth's Moon)
#                 "399"            (Earth planet center)
#                 "3"              (Earth-Moon barycenter)
#                 "{-236}"         (MESSENGER spacecraft .. braces needed
#                                   to pass negative numbers)
#
#       Note that small-body designation look-ups are SPACE and CASE-SENSITIVE.
#       Names are CASE-INSENSITIVE.
#
#   {output_file}
#
#     OPTIONAL name to give the output file on your system. If not
#     specified, the command-line [target] string is used to build
#     a local file name in the current directory using the template:
#
#         [target].txt
#
#     ... though spaces in the [target] string are removed in the file name.
#
# Command-line arguments require quotes if they contain spaces or a semi-colon.
# The quotes guarantee the whole argument is passed literally to the script
# without being improperly parsed into components. Instead of remembering this,
# one could also just enclose all command-line arguments in quotes as routine
# practice.
#
# Example command-line:
#
#   obs_tbl "2015 HM10;" 2015hm10.txt
#
#   If the local output file name wasn't specified, i.e.,
#
#   obs_tbl "2015 HM10;"
#
#   ... the default file name created would be "2015HM10.txt"
#
# SCRIPT REQUIREMENTS
# -------------------
#
# #1) "obs_tbl" is written in the Expect automation language. The Expect
# interpretation program must be present on any computer system before
# obs_tbl can run.
#
#   The Expect language is available for download at the URL:
#
#                      http://expect.nist.gov/
#
#   Expect is an extension of the Tcl/Tk languages, which are also required.
# The web site provides appropriate links. Installation procedures are
# provided and all packages can typically be installed and their self-check
# tests completed in about 45 minutes by following the directions.
#
#   Expect is primarily supported on UNIX platforms, but versions for other
# systems do exist. A useful book on the language is "Exploring Expect" by
# Don Libes (ISBN 1-56592-090-2).
#
#   Once the Expect language is installed on your machine, you may need to
# alter the very first line of this script ("#!/usr/local/bin/expect") to
# point to the installation location on that machine.  The script will then
# be able to execute.
#
#   The user's machine must be able to resolve Internet domain names and
# support internet FTP.
#
# USAGE
# -----
#
# This script will handle typical errors and respond with an indicator
# message, but is not necessarily bullet-proof, being intended mostly as
# a functional example users can customize.
#
# See Horizons documentations for additional information on that program's
# operation.
#
# It could take a few seconds or longer to generate and transfer the table,
# depending on how much numerical integration is required and the network
# state.
#
# The script returns a standard exit status code (0=OK, 1=FAILED) which
# can be checked by calling programs.
#
#------------------------------------------------------------------------------
# Establish defaults & turn debugging on or off
#
  exp_internal 0   ; # Diagnostic output: 1= on, 0=off
  set timeout  5  ; # Set timeout to prevent infinite hang if network down
  remove_nulls 0   ; # Disable null removal from Horizons output
#
# Turn off output mirroring (set quiet 0; set quiet 1 to observe process)
#
  set quiet 0
  log_user $quiet
#
# Initialize local script variables
  set start_flag 0
#
# Set Horizons server constants
#
  set horizons_server   ssd.jpl.nasa.gov
  set horizons_ftp_dir  pub/ssd/
#
# Process script command-line values; check for input problems
#
  set argc [llength $argv]
  if {$argc < 2} {
      puts "\nMissing argument. Usage:"
      puts { obs_tbl [start] [target] }
      puts " "
      puts "Example --"
      puts { obs_tbl "2018-01-01 10:00" "2015 HM10;" }
      puts " "
      exit 1
  }
  set START_TIME [lindex $argv 0]
  set TARGET [lindex $argv 1]
  set STEP_SIZE "7d"
  set QUANTITIES "21"
#
# Connect to Horizons
#
  spawn telnet $horizons_server 6775
#
# Get main Horizons prompt and proceed
#
  expect {
   timeout        {puts "No response from $horizons_server"; exit 1}
   "unknown host" {puts "This system cannot find $horizons_server"; exit 1}
   "Horizons> "   {send PAGE\r} }
  set timeout 5
  expect {
   "Horizons> "   { send -- "$TARGET\r"}
  }
#
# Handle prompt for search/select
#
  expect {
      -re ".*Continue.*" {
          send yes\r
          expect {
              -re ".*Select.*\[E].*<cr>: $" { send E\r  }
              -re ".*Multiple major-bodies match.*---(.*)Number of matches.*" {
                  send x\r
                  puts $expect_out(1,string)
                  exit 2
              }
              -re ".*No matches found.*: $"  {
                  send x\r
                  puts "\nCancelled -- unique object not found: $TARGET"
                  puts "\nObject not matched to database OR multiple matches found."
                  puts " "
                  exit 1
              }
          }
      }
      -re ".*Select.*\[E].*<cr>: $" { send E\r  }
      -re ".*Multiple major-bodies match.*---(.*)Number of matches.*" {
          send x\r
          puts $expect_out(1,string)
          exit 2
      }
      -re ".*No matches found.*: $"  {
          send x\r
          puts "\nCancelled -- unique object not found: $TARGET"
          puts "\nObject not matched to database OR multiple matches found."
          puts " "
          exit 1
      }
  }
#
# Request observer table ephemeris type
#
  expect {
      timeout { exit 1 }
      -re ".*Observe, Elements.*: $" {
          send O\r }
  }
#
# Provide coordinate/observing center
#
  expect {
      timeout { exit 1 }
      -re ".*Coordinate center.*: $" {
          send \r }
  }
#
# Specify START date
#
  expect {
      timeout { exit 1 }
      -re ".*disallowed.*" { puts " $START_TIME      0.0"; exit 0 }
      -re ".*Starting UT.*: $" {
          send $START_TIME\r }
  }
#
# specify STOP date
#
  expect {
      timeout { exit 1 }
      -re ".*Ending.*: $" {
          send \r }
  }
#
# specify step size
#
  expect {
      timeout { exit 1 }
      -re ".*Output interval.*: $" {
          send $STEP_SIZE\r }
  }
#
# specify output QUANTITIES
#
  expect {
      timeout { exit 1 }
      -re ".*Accept default.*: $" {
          send Y\r }
  }
#
# Set output quantities
#
  expect {
      timeout { exit 1 }
      -re ".*Select table quantities.*: $" {
          send $QUANTITIES\r }
  }
#
# Read the output table entry
#
  expect {
      timeout { exit 1 }
      -re ".*SOE(.*)EOE.*" {
          puts $expect_out(1,string) }
      send "X\r"
  }
#
# Finished, set status code
#
  exit 0
